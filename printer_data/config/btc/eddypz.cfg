[probe_eddy_current fly_eddy_probe]
sensor_type: ldc1612
i2c_address: 43
i2c_mcu: SHT32
i2c_bus: i2c1e
x_offset: 0 # Remember to set x offset
y_offset: 0 # Remember to set y offset 
speed:10
lift_speed: 15.0
i2c_speed: 4000000

[temperature_probe fly_eddy_probe]
sensor_type: Generic 3950
sensor_pin:toolboard0:gpio28
[gcode_macro CALIBRATE_EDDY]
description: Execute Eddy Current Sensor Calibration and Subsequent Leveling Process
gcode:
    # ========== Start Calibrating Eddy Current Sensor ==========
    M117 Starting Eddy Current Sensor Calibration...
    # Safety Check: Verify if the printer is in pause state
    {% if printer.pause_resume.is_paused|lower == 'true' %}
        {action_raise_error("Please resume printing before calibration")}
    {% endif %}
    SET_KINEMATIC_POSITION X={printer.toolhead.axis_maximum.x / 2} Y={printer.toolhead.axis_maximum.y / 2} Z=0
    # Execute Calibration Process 
    LDC_CALIBRATE_DRIVE_CURRENT CHIP=fly_eddy_probe 
    # Attempt to output DRIVE_CURRENT_FEEDBACK value
    M117 Eddy Current Calibration Complete, Feedback Value: {DRIVE_CURRENT_FEEDBACK}
    # Check if Feedback Value is within Normal Range
    {% if DRIVE_CURRENT_FEEDBACK is defined %}
        {% if DRIVE_CURRENT_FEEDBACK < 10 or DRIVE_CURRENT_FEEDBACK > 20 %}
            M117 Warning: Eddy Current Feedback Value Abnormal ({DRIVE_CURRENT_FEEDBACK}). Please check connections.
        {% else %}
            M117 Eddy Current Feedback Value Normal ({DRIVE_CURRENT_FEEDBACK}).
        {% endif %}
    {% else %}
        M117 Error: Unable to retrieve DRIVE_CURRENT_FEEDBACK value.
    {% endif %}
    
    G1 Z2 F300
    
    # Prompt user to perform manual Z Offset Calibration
    M117 Please perform manual Z Offset Calibration.
    # Execute Eddy Effective Distance Calibration
    PROBE_EDDY_CURRENT_CALIBRATE CHIP=fly_eddy_probe 
    # Indicate Calibration Completion
    M117 All Calibration Processes Completed!
[gcode_macro TEMP_COMPENSATION]
description: Temperature Compensation Calibration Process
gcode:
  {% set bed_temp = params.BED_TEMP|default(90)|int %}
  {% set nozzle_temp = params.NOZZLE_TEMP|default(250)|int %}
  {% set temperature_range_value = params.TEMPERATURE_RANGE_VALUE|default(3)|int %}
  {% set desired_temperature = params.DESIRED_TEMPERATURE|default(80)|int %}
  {% set Temperature_Timeout_Duration = params.TEMPERATURE_TIMEOUT_DURATION|default(6500000000)|int %}
    # Safety check: Ensure all axes are unlocked
    {% if printer.pause_resume.is_paused %}
        { action_raise_error("Error: Printer is paused. Please resume first.") }
    {% endif %}
    # Step 1: Home all axes
    STATUS_MESSAGE="Homing all axes..."
    G28
    STATUS_MESSAGE="Homing completed"
    # Step 2: Auto-leveling
    # Step 3: Safely raise the Z-axis
    STATUS_MESSAGE="Raising Z-axis..."
    G90
    G0 Z5 F2000  # Raise slowly to prevent collisions
    # Step 4: Set timeout and temperature calibration
    SET_IDLE_TIMEOUT TIMEOUT={Temperature_Timeout_Duration}
    STATUS_MESSAGE="Starting temperature probe calibration..."
    TEMPERATURE_PROBE_CALIBRATE PROBE=fly_eddy_probe TARGET={desired_temperature} STEP={temperature_range_value}
    # Step 5: Set printing temperatures (modify as needed)
    STATUS_MESSAGE="Setting working temperatures..."
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_temp}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={nozzle_temp}
    # Completion message
    STATUS_MESSAGE="Temperature compensation process completed!"
    description: G-Code macro
[gcode_macro CANCEL_TEMP_COMPENSATION]
description: Abort Temperature Compensation Process
gcode:
    SET_IDLE_TIMEOUT TIMEOUT=600  # Restore default timeout
    TURN_OFF_HEATERS
    M117 Calibration Aborted
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode: 
       _BED_MESH_CALIBRATE horizontal_move_z=2 METHOD=rapid_scan {rawparams}
       G28 X Y
[force_move]
enable_force_move: true
[gcode_macro CALIBRATE_DD]
description: Mobile axis macro
gcode:
    # Reset X/Y Axis 
    G28 X Y 
    # Move the print head to the center of the heated bed (compatible with most CoreXY models)
    G0 X{printer.toolhead.axis_maximum.x / 2} Y{printer.toolhead.axis_maximum.y / 2} F6000 
    SET_KINEMATIC_POSITION Z={printer.toolhead.axis_maximum.z-10}
